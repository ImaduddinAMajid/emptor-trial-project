service: emptor-docs-processing

frameworkVersion: ">=1.1.0 <2.0.0"

plugins:
  - serverless-python-requirements

package:
  exclude:
    - node_modules/**
    - requirements/**
    - README.md
    - package.json
    - package-lock.json
    - requirements.txt

custom:
  app_acronym: emptor-body-response
  default_stage: test
  stage: ${opt:stage, self:custom.default_stage}
  region: ${opt:region, self:provider.region}
  s3_bucket: ${opt:s3_bucket, self:custom.app_acronym}
  s3_key_base: ${opt:s3_key_base, self:custom.stage}
  s3_bucket_arn: arn:aws:s3:::${self:custom.s3_bucket}
  s3_role_resource: ${self:custom.s3_bucket_arn}/${self:custom.s3_key_base}/*
  pythonRequirements:
    dockerizePip: non-linux
    fileName: requirements/requirements-dev.txt

provider:
  name: aws
  runtime: python3.7
  region: eu-central-1
  environment:
    REGION: ${self:custom.region}
    S3_BUCKET: ${self:custom.s3_bucket}
    S3_KEY_BASE: ${self:custom.s3_key_base}
  iamRoleStatements:
    - Effect: Allow
      Action:
        - s3:*
      Resource: ${self:custom.s3_role_resource}

functions:
  create:
    handler: title/create.create
    events:
      - http:
          path: title
          method: post
          cors: true

resources:
  Resources:
    ResponseBodyBucket:
      Type: 'AWS::S3::Bucket'
      Properties:
        BucketName: ${self:provider.environment.S3_BUCKET}
    ResponseBodyPolicy:
      Type: AWS::S3::BucketPolicy
      Properties:
        Bucket:
          Ref: ResponseBodyBucket
        PolicyDocument:
          Version: "2012-10-17"
          Statement: [
            {
              Action: ['s3:GetObject', 's3:PutObject'],
              Effect: 'Allow',
              Resource: {
                Fn::Join: ['', ['arn:aws:s3:::', { Ref: 'ResponseBodyBucket' }, '/*']],
              },
              Principal: '*'
            },
]